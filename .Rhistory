install.packages("osmdata")
library(osmdata)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages(c("askpass", "backports", "bayesplot", "Bessel", "BH", "binman", "bit", "bitops", "blob", "boot", "brew", "brio", "brms", "broom", "bslib", "cachem", "callr", "car", "carData", "caret", "checkmate", "class", "classInt", "cli", "clipr", "cluster", "ClusterR", "coda", "codetools", "colorspace", "colourpicker", "commonmark", "config", "conquer", "countrycode", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "ctmm", "data.table", "DBI", "dbplyr", "deldir", "dendextend", "DEoptimR", "desc", "devtools", "dials", "diffobj", "digest", "diptest", "distributional", "dslabs", "DT", "dtplyr", "e1071", "ellipse", "EnvStats", "evaluate", "Exact", "expm", "FactoMineR", "fansi", "farver", "fastmap", "fasttime", "flexmix", "fontawesome", "forcats", "foreach", "foreign", "fpc", "fs", "future", "future.apply", "gargle", "generics", "gert", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggridges", "ggsci", "ggsignif", "ggtext", "ggupset", "gh", "gitcreds", "glmnet", "globals", "Gmedian", "gmp", "googledrive", "googlesheets4", "gower", "graphlayouts", "gridtext", "gsl", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "ISLR2", "isoband", "iterators", "jpeg", "jsonlite", "keras", "kernlab", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "leaflet.providers", "leaps", "lifecycle", "listenv", "lme4", "lmom", "loo", "lubridate", "magick", "magrittr", "markdown", "MatrixModels", "matrixStats", "mclust", "memoise", "mgcv", "mime", "minqa", "modelr", "munsell", "mvtnorm", "ncdf4", "nleqslv", "nlme", "nloptr", "nnet", "opdisDownsampling", "openssl", "openxlsx", "parallelly", "pathfindR", "pathfindR.data", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "png", "polyclip", "polynom", "posterior", "prabclus", "pracma", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "proxy", "ps", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "readr", "readxl", "recipes", "rematch", "remotes", "repr", "reprex", "reticulate", "rlang", "rmarkdown", "Rmpfr", "rnaturalearth", "rnaturalearthdata", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "RSelenium", "RSpectra", "rstan", "rstantools", "rstatix", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "scatterplot3d", "sessioninfo", "sf", "shape", "shiny", "signal", "skimr", "sourcetools", "sp", "SparseM", "spatial", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "statmod", "stringdist", "stringi", "stringr", "survival", "sys", "systemfonts", "tensorA", "tensorflow", "terra", "testthat", "tfruns", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "trajr", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "viridis", "viridisLite", "vroom", "waldo", "wdman", "whisker", "withr", "wk", "xfun", "XML", "xml2", "xopen", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "backports", "bayesplot", "Bessel", "BH", "binman", "bit", "bitops", "blob", "boot", "brew", "brio", "brms", "broom", "bslib", "cachem", "callr", "car", "carData", "caret", "checkmate", "class", "classInt", "cli", "clipr", "cluster", "ClusterR", "coda", "codetools", "colorspace", "colourpicker", "commonmark", "config", "conquer", "countrycode", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "ctmm", "data.table", "DBI", "dbplyr", "deldir", "dendextend", "DEoptimR", "desc", "devtools", "dials", "diffobj", "digest", "diptest", "distributional", "dslabs", "DT", "dtplyr", "e1071", "ellipse", "EnvStats", "evaluate", "Exact", "expm", "FactoMineR", "fansi", "farver", "fastmap", "fasttime", "flexmix", "fontawesome", "forcats", "foreach", "foreign", "fpc", "fs", "future", "future.apply", "gargle", "generics", "gert", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggridges", "ggsci", "ggsignif", "ggtext", "ggupset", "gh", "gitcreds", "glmnet", "globals", "Gmedian", "gmp", "googledrive", "googlesheets4", "gower", "graphlayouts", "gridtext", "gsl", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "ISLR2", "isoband", "iterators", "jpeg", "jsonlite", "keras", "kernlab", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "leaflet", "leaflet.providers", "leaps", "lifecycle", "listenv", "lme4", "lmom", "loo", "lubridate", "magick", "magrittr", "markdown", "MatrixModels", "matrixStats", "mclust", "memoise", "mgcv", "mime", "minqa", "modelr", "munsell", "mvtnorm", "ncdf4", "nleqslv", "nlme", "nloptr", "nnet", "opdisDownsampling", "openssl", "openxlsx", "parallelly", "pathfindR", "pathfindR.data", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "png", "polyclip", "polynom", "posterior", "prabclus", "pracma", "prettyunits", "pROC", "processx", "prodlim", "progress", "progressr", "promises", "proxy", "ps", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "RCurl", "readr", "readxl", "recipes", "rematch", "remotes", "repr", "reprex", "reticulate", "rlang", "rmarkdown", "Rmpfr", "rnaturalearth", "rnaturalearthdata", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "RSelenium", "RSpectra", "rstan", "rstantools", "rstatix", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "scatterplot3d", "sessioninfo", "sf", "shape", "shiny", "signal", "skimr", "sourcetools", "sp", "SparseM", "spatial", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "statmod", "stringdist", "stringi", "stringr", "survival", "sys", "systemfonts", "tensorA", "tensorflow", "terra", "testthat", "tfruns", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "trajr", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "viridis", "viridisLite", "vroom", "waldo", "wdman", "whisker", "withr", "wk", "xfun", "XML", "xml2", "xopen", "xts", "yaml", "zip", "zoo"))
help(rexp)
set.seed(12345)
theoretical_sample <- rexp(n = dim(df)[1], rate = lambda)
rm(list = ls())
setwd('/Users/jasonluo/Documents/R_crime_analysis')
library(tidyverse)
# Importing cleaned data
df <- read.csv('RMS_Crime_Incidents_Cleaned.csv')
set.seed(12345)
theoretical_sample <- rexp(n = dim(df)[1], rate = lambda)
ggplot(data = df, aes(x = interarrival_time)) +
geom_histogram(fill = 'darkblue', alpha = 0.6, bins = 30, binwidth = 0.25) +
ggtitle("Distribution of Inter-arrival Times of Incidents") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
sample_mean <- mean(df$interarrival_time)
lambda <- 1/sample_mean
n <- 100 # 100 arrivals
set.seed(1234)
generate_arrival_times <- function(n) {
interarrival_time_samples <- rexp(n = n, rate = lambda)
arrival_time_sample <- sum(interarrival_time_samples)
return(arrival_time_sample)
}
arrival_times <- replicate(1000, generate_arrival_times(n)) # generates 1000 samples of arrival times
arrival_times_df <- as.data.frame(arrival_times)
gamma_samples <- rgamma(n = 1000, shape = n, rate = lambda)
gamma_samples_df <- as.data.frame(gamma_samples)
# Plot 2 ways to simulate fist n arrival times, which follow a gamma distribution
ggplot() +
geom_histogram(data = gamma_samples_df, aes(x = gamma_samples), fill = 'purple', alpha = 0.4) +
geom_histogram(data = arrival_times_df, aes(x = arrival_times), fill = 'red', alpha = 0.4) +
ggtitle(paste0("Theoretical Distribution(s) of Arrival Times of First " , n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
set.seed(12345)
theoretical_sample <- rexp(n = dim(df)[1], rate = lambda)
emperical_sample <- df$interarrival_time
qqplot(theoretical_sample, emperical_sample, main = paste0("QQPlot For Inter-arrival Times of Incidents"))
abline(a = 0, b = 1, col = 'orange')
categories <- unique(df$offense_category)
probs <- c()
for (i in 1:length(categories)) {
prob_of_category <- sum(df$offense_category == categories[i]) / nrow(df)
print(paste0("Probability of commiting ", categories[i], " offense: ", prob_of_category))
probs[i] <- prob_of_category
}
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 1000, prob = max(probs))
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 10000, prob = max(probs))
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
geom_density(aes(y=..density..)) +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 10000, prob = max(probs))
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
geom_density(aes(y=after_stat(density)) +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
geom_density(aes(y=after_stat(density)) +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
geom_density(after_stat(density)) +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 10000, prob = max(probs))
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "red") +
geom_density(aes( y = after_stat(density))) +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 10000, prob = max(probs))
set.seed(123)
binPois <- function(n, prob) {
y <- rpois(n, lambda = lambda) # y ~ pois
x_y <- rbinom(n, size = y, prob = prob) # x | y ~ bin
x_y_df <- as.data.frame(x_y)
graph <- ggplot(data = x_y_df, aes(x_y)) +
geom_histogram(bins = 20, alpha = 0.6, fill = "lightgreen") +
theme_minimal() +
ggtitle(paste0("Estimated Distribution of ", n, " Incidents")) +
theme(plot.title = element_text(hjust = 0.5))
return(graph)
}
binPois(n = 10000, prob = max(probs))
